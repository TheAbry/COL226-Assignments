# 1 "lexer.mll"
 
open Lexing
open Parser

exception EoF
exception LexicalError of string

let rec is_valid_alnum_underscore s =
  match s with
  | [] -> true
  | c :: rest ->
    match c with
    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> is_valid_alnum_underscore rest
    | _ -> false

let is_valid_var_string s =
  match s with
  | [] -> false
  | c :: rest ->
    match c with
    | 'A' .. 'Z' | '_' -> is_valid_alnum_underscore rest
    | _ -> false

let is_valid_term_string s =
  match s with
  | [] -> false
  | c :: rest ->
    match c with
    | 'a' .. 'z' -> is_valid_alnum_underscore rest
    | _ -> false

let to_token s = match s with
  | "fail" -> BooleanConst "fail"
  | "false" -> BooleanConst "false"
  | "true" -> BooleanConst "true"
  | s when is_valid_var_string (s |> String.to_seq |> List.of_seq) -> VarIdentifier s
  | s when is_valid_term_string (s |> String.to_seq |> List.of_seq) -> TermIdentifier s

# 41 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\225\255\226\255\077\000\087\000\229\255\002\000\003\000\
    \035\000\237\255\062\000\102\000\240\255\104\000\243\255\244\255\
    \245\255\102\000\247\255\248\255\249\255\250\255\251\255\252\255\
    \253\255\254\255\255\255\246\255\242\255\239\255\231\255\236\255\
    \235\255\232\255\144\000\249\255\145\000\255\255\251\255\252\255\
    \253\255\254\255\106\000\254\255\102\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\028\000\027\000\255\255\025\000\022\000\
    \021\000\255\255\017\000\030\000\255\255\014\000\255\255\255\255\
    \255\255\030\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\006\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\035\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\043\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\026\000\026\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \026\000\010\000\005\000\000\000\000\000\012\000\000\000\000\000\
    \025\000\024\000\014\000\016\000\021\000\015\000\020\000\013\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\017\000\019\000\008\000\006\000\007\000\033\000\
    \032\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\023\000\011\000\022\000\009\000\004\000\
    \031\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\030\000\018\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\029\000\028\000\027\000\044\000\045\000\000\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\037\000\041\000\000\000\000\000\004\000\000\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\036\000\040\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\039\000\
    \002\000\000\000\000\000\000\000\000\000\038\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\010\000\000\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\011\000\013\000\017\000\042\000\044\000\255\255\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\034\000\036\000\255\255\255\255\004\000\255\255\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\034\000\036\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\000\
    \000\000\255\255\255\255\255\255\255\255\036\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\042\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \034\000\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 49 "lexer.mll"
                    ( token lexbuf )
# 189 "lexer.ml"

  | 1 ->
# 50 "lexer.mll"
        ( ParenOpen )
# 194 "lexer.ml"

  | 2 ->
# 51 "lexer.mll"
        ( ParenClose )
# 199 "lexer.ml"

  | 3 ->
# 52 "lexer.mll"
        ( BracketOpen )
# 204 "lexer.ml"

  | 4 ->
# 53 "lexer.mll"
        ( BracketClose )
# 209 "lexer.ml"

  | 5 ->
# 54 "lexer.mll"
        ( Comma )
# 214 "lexer.ml"

  | 6 ->
# 55 "lexer.mll"
        ( Dot )
# 219 "lexer.ml"

  | 7 ->
# 56 "lexer.mll"
        ( SemiColon )
# 224 "lexer.ml"

  | 8 ->
# 57 "lexer.mll"
        ( Pipe )
# 229 "lexer.ml"

  | 9 ->
# 58 "lexer.mll"
         ( Arrow )
# 234 "lexer.ml"

  | 10 ->
# 59 "lexer.mll"
        ( ArithOp "+" )
# 239 "lexer.ml"

  | 11 ->
# 60 "lexer.mll"
        ( ArithOp "-" )
# 244 "lexer.ml"

  | 12 ->
# 61 "lexer.mll"
        ( ArithOp "*" )
# 249 "lexer.ml"

  | 13 ->
# 62 "lexer.mll"
         ( Comment (comment lexbuf) )
# 254 "lexer.ml"

  | 14 ->
# 63 "lexer.mll"
        ( ArithOp "/" )
# 259 "lexer.ml"

  | 15 ->
# 64 "lexer.mll"
        ( ArithOp "%" )
# 264 "lexer.ml"

  | 16 ->
# 65 "lexer.mll"
          ( UnaryBoolOp "!" )
# 269 "lexer.ml"

  | 17 ->
# 66 "lexer.mll"
        ( BooleanConst "cut" )
# 274 "lexer.ml"

  | 18 ->
# 67 "lexer.mll"
        ( StringOp "^" )
# 279 "lexer.ml"

  | 19 ->
# 68 "lexer.mll"
         ( CompOp "<=" )
# 284 "lexer.ml"

  | 20 ->
# 69 "lexer.mll"
         ( CompOp ">=" )
# 289 "lexer.ml"

  | 21 ->
# 70 "lexer.mll"
        ( CompOp "<" )
# 294 "lexer.ml"

  | 22 ->
# 71 "lexer.mll"
        ( CompOp ">" )
# 299 "lexer.ml"

  | 23 ->
# 72 "lexer.mll"
         ( CompOp "==" )
# 304 "lexer.ml"

  | 24 ->
# 73 "lexer.mll"
         ( CompOp "!=" )
# 309 "lexer.ml"

  | 25 ->
# 74 "lexer.mll"
        ( CompOp "=" )
# 314 "lexer.ml"

  | 26 ->
# 75 "lexer.mll"
        ( StringConst (string_literal lexbuf) )
# 319 "lexer.ml"

  | 27 ->
let
# 76 "lexer.mll"
                                              s
# 325 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 76 "lexer.mll"
                                                ( to_token s )
# 329 "lexer.ml"

  | 28 ->
let
# 77 "lexer.mll"
              s
# 335 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 77 "lexer.mll"
                ( NumeralConst (int_of_string s) )
# 339 "lexer.ml"

  | 29 ->
# 78 "lexer.mll"
        ( EOF )
# 344 "lexer.ml"

  | 30 ->
# 79 "lexer.mll"
      ( raise (LexicalError (lexeme lexbuf)) )
# 349 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and string_literal lexbuf =
   __ocaml_lex_string_literal_rec lexbuf 34
and __ocaml_lex_string_literal_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 82 "lexer.mll"
        ( "" )
# 361 "lexer.ml"

  | 1 ->
# 83 "lexer.mll"
             ( "\"" )
# 366 "lexer.ml"

  | 2 ->
# 84 "lexer.mll"
              ( "\\" )
# 371 "lexer.ml"

  | 3 ->
# 85 "lexer.mll"
             ( "\n" )
# 376 "lexer.ml"

  | 4 ->
# 86 "lexer.mll"
             ( "\t" )
# 381 "lexer.ml"

  | 5 ->
# 87 "lexer.mll"
              ( "\\" )
# 386 "lexer.ml"

  | 6 ->
let
# 88 "lexer.mll"
         c
# 392 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 88 "lexer.mll"
           ( String.make 1 c ^ string_literal lexbuf )
# 396 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_string_literal_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 42
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 91 "lexer.mll"
            ( "" )
# 408 "lexer.ml"

  | 1 ->
let
# 92 "lexer.mll"
         c
# 414 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 92 "lexer.mll"
           ( String.make 1 c ^ comment lexbuf )
# 418 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

